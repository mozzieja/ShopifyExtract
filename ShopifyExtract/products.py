# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_products.ipynb.

# %% auto 0
__all__ = ['api_key', 'access_token', 'shop_url', 'graphql_endpoint', 'headers', 'product_fields', 'fetch_all_products']

# %% ../nbs/01_products.ipynb 2
import requests
import json
import os
import keyring
import sqlite3
import datetime

# %% ../nbs/01_products.ipynb 3
# API Configuration
api_key = keyring.get_password("Shopify", "SHOPIFY_API_KEY")
access_token = keyring.get_password("Shopify", "SHOPIFY_API_PASSWORD")
shop_url = keyring.get_password("Shopify", "SHOPIFY_SHOP_URL")
graphql_endpoint = 'https://' + shop_url + '/admin/api/2025-01/graphql.json'

# Headers for API requests
headers = {
    'X-Shopify-Access-Token': access_token,
    'Content-Type': 'application/json'
}

# %% ../nbs/01_products.ipynb 5
product_fields = '''
    id
    title
    totalInventory
    tracksInventory
    updatedAt
    description
    descriptionHtml
    createdAt
    tags
    hasOutOfStockVariants
    isGiftCard
    vendor
    status
    productType
    onlineStoreUrl
    hasOnlyDefaultVariant
    mediaCount {
        count
    }
    seo {
        description
        title
    }
    variantsCount {
        count
    }
'''


# %% ../nbs/01_products.ipynb 6
def fetch_all_products():
    products = []
    has_next_page = True
    cursor = None
    loop_count = 0
    
    while has_next_page:
        if cursor:
            query = f'''
            {{
              products(first: 10, after: "{cursor}") {{
                pageInfo {{
                  hasNextPage
                  endCursor
                }}
                edges {{
                  node {{
                    {product_fields}
                  }}
                }}
              }}
            }}
            '''
        else:
            query = f'''
            {{
              products(first: 10) {{
                pageInfo {{
                  hasNextPage
                  endCursor
                }}
                edges {{
                  node {{
                    {product_fields}
                  }}
                }}
              }}
            }}
            '''
            
        try:
            response = requests.post(graphql_endpoint, json={'query': query}, headers=headers)
            response.raise_for_status()
            result = response.json()
            
            page_products = result['data']['products']['edges']
            for edge in page_products:
                products.append(edge['node'])
            
            has_next_page = result['data']['products']['pageInfo']['hasNextPage']
            cursor = result['data']['products']['pageInfo']['endCursor']
            
            print(f"Fetched {len(page_products)} products. Total so far: {len(products)}")
            loop_count += 1
            
        except Exception as e:
            print(f"Error fetching products: {e}")
            break
    
    return products

